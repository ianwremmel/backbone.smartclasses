var smartclasses={initialize:function(options){if(!(this instanceof Backbone.View))throw new Error("Backbone.Smartclasses can only be applied to Backbone.View-like objects.");options&&options.smartclasses&&(this.smartclasses=_.assign({},this.smartclasses,options.smartclasses)),_.bindAll(this,"setSmartclass");var target;if(!this.model)throw new Error("Backbone.Smartclasses only works on bound Views.");target=this.model,this.smarttests={},_(this.smartclasses).each(function(config,className){if(!config.deps||!_.isArray(config.deps)||0===config.deps.length)throw new Error('deps[] must be specified for "'+className+'".');var test;test=config.test?_.bind(config.test,this):_.bind(this.testDepsForTruthiness,this,config.deps);var setSmartclass=_.bind(this.setSmartclass,this,test,className);this.smarttests[className]=setSmartclass,_(config.deps).each(function(dep){this.listenTo(target,"change:"+dep,setSmartclass)},this)},this),this.setClasses()},setClasses:function(){_(this.smarttests).each(function(test){test.apply(this)},this)},testDepsForTruthiness:function(deps){return 1===deps.length?this._test(this.model.get(deps[0])):_(this.model.pick(deps)).values().every(this._test)},_test:function(value){return!!value||0===value},setSmartclass:function(test,className){test()?this.$el.addClass(className):this.$el.removeClass(className)}};
//# sourceMappingURL=dist/backbone.smartclasses.map